package main

import "log"

/**
题目：https://leetcode-cn.com/problems/decode-ways/

解码方法

一条包含字母A-Z 的消息通过以下映射进行了 编码 ：

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为 (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

题目数据保证答案肯定是一个 32 位 的整数。

示例 1：

输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2：

输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
示例 3：

输入：s = "0"
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。

提示：

1 <= s.length <= 100
s 只包含数字，并且可能包含前导零。

*/

func main() {
	s := "0"
	log.Println("解码方法-动态规划:", numDecodings(s))
}

// numDecodings 动态规划 O(n) O(n) 也可以优化到O(1)空间复杂度
func numDecodings(s string) int {
	/**
	状态转移方程
	f[i]=f[i−1],1⩽a≤9	i作为一个单独item
	f[i]=f[i−2],10⩽b⩽26	i与前一位共同作为item
	f[i]=f[i−1]+f[i−2],1⩽a≤9,10⩽b⩽26	i既能单独也能合作

	*/
	n := len(s)
	s = " " + s
	f := make([]int, n+1)
	f[0] = 1
	for i := 1; i < n+1; i++ {
		a := s[i] - '0'
		b := (s[i-1]-'0')*10 + a

		ares := 1 <= a && a <= 9
		bres := 10 <= b && b <= 26
		if ares && bres {
			f[i] = f[i-1] + f[i-2]
		} else if ares {
			f[i] = f[i-1]
		} else {
			f[i] = f[i-2]
		}

		/*if 1 <= a && a <= 9 {
			f[i] = f[i-1]
		}

		if 10 <= b && b <= 26 {
			f[i] += f[i-2]
		}*/
	}

	return f[n]
}
